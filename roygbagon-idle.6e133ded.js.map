{"version":3,"sources":["index.js"],"names":["elem","document","getElementById","startButton","moreButton","investButton","buyRedButton","buyGreenButton","buyBlueButton","shipButton","dumpButton","config","scoreIncrement","investmentIncrement","investmentCost","colorCost","colorIncrement","shipAwardMultiplyer","dumpMultiplyer","accuracyMods","state","score","investment","ticks","lastFrame","timeDelta","colors","red","green","blue","targetColor","shipped","getMs","Date","now","getRGB","color","prorate","value","period","prorateSeconds","prorateInterest","calculateInterest","calculateColorHex","total","calculateColorWeight","redHex","Math","floor","toString","greenHex","blueHex","substr","calculateColorDistance","x1","y1","z1","x2","y2","z2","pow","calculateShipValue","currColorHex","currColor","parseInt","targetColorHex","colorDistance","colorErrorPct","console","log","currWeight","targetWeight","weightError","accuracyMod","reduce","currMod","max","mod","baseAward","abs","tick","update","render","window","requestAnimationFrame","currentColor","innerHTML","toPrecision","renderShipped","map","shippedColor","shipValue","error","weightDiff","join","init","addEventListener","errorPct","unshift","random","dumpCost","initOnClick","removeEventListener"],"mappings":"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","file":"roygbagon-idle.6e133ded.js","sourceRoot":"..","sourcesContent":["const elem = document.getElementById(\"roygbagon\");\nconst startButton = document.getElementById(\"start\");\nconst moreButton = document.getElementById(\"more\");\nconst investButton = document.getElementById(\"invest\");\nconst buyRedButton = document.getElementById(\"buyRed\");\nconst buyGreenButton = document.getElementById(\"buyGreen\");\nconst buyBlueButton = document.getElementById(\"buyBlue\");\nconst shipButton = document.getElementById(\"shipIt\");\nconst dumpButton = document.getElementById(\"dumpIt\");\n\nconst config = {\n  scoreIncrement: 10,\n  investmentIncrement: 10,\n  investmentCost: 1000,\n  colorCost: 50,\n  colorIncrement: 1,\n  shipAwardMultiplyer: 1.1,\n  dumpMultiplyer: 1.1,\n  accuracyMods: [\n    [1, 0.25],\n    [0.5, 0.5],\n    [0.25, 0.8],\n    [0.1, 1],\n    [0.05, 1.5],\n    [0.01, 1.75]\n  ]\n};\n\nconst state = {\n  score: 400,\n  investment: 0,\n  ticks: 0,\n  lastFrame: 0,\n  timeDelta: 0,\n  colors: {\n    red: 2,\n    green: 3,\n    blue: 6\n  },\n  targetColor: {\n    red: 2,\n    green: 3,\n    blue: 6\n  },\n  shipped: []\n};\n\n// Helper functions\nconst getMs = () => Date.now();\nconst getRGB = color => [color >> 16, (color >> 8) & 0xff, color & 0xff];\nconst prorate = (value, timeDelta, period) => value * (timeDelta / period);\nconst prorateSeconds = (value, timeDelta) => prorate(value, timeDelta, 1000);\nconst prorateInterest = state =>\n  prorateSeconds(calculateInterest(state), state.timeDelta);\nconst calculateInterest = state =>\n  config.scoreIncrement *\n  ((state.investment * config.investmentIncrement) / 1000);\n\nconst calculateColorHex = ({ red, green, blue }) => {\n  const total = calculateColorWeight({\n    red,\n    green,\n    blue\n  });\n  const redHex = \"0\" + Math.floor((red / total) * 255).toString(16);\n  const greenHex = \"0\" + Math.floor((green / total) * 255).toString(16);\n  const blueHex = \"0\" + Math.floor((blue / total) * 255).toString(16);\n  return `${redHex.substr(-2)}${greenHex.substr(-2)}${blueHex.substr(-2)}`;\n};\n\nconst calculateColorWeight = ({ red, green, blue }) => red + green + blue;\nconst calculateColorDistance = ([x1, y1, z1], [x2, y2, z2]) =>\n  (\n    Math.pow((x2 - x1), 2) + \n    Math.pow((y2 - y1), 2) + \n    Math.pow((z2 - z1), 2)\n  ) ^ (1 / 2);\n\nconst calculateShipValue = state => {\n  const currColorHex = calculateColorHex(state.colors);\n  const currColor = parseInt(currColorHex, 16);\n  const targetColorHex = calculateColorHex(state.targetColor);\n  const targetColor = parseInt(targetColorHex, 16);\n\n  const colorDistance = calculateColorDistance(\n    getRGB(currColor),\n    getRGB(targetColor)\n  );\n\n  const colorErrorPct = colorDistance / 195075;\n  \n  console.log(`Color Distance: ${colorDistance}`, `Color Error: ${colorErrorPct}`)\n\n  const currWeight = calculateColorWeight(state.colors);\n  const targetWeight = calculateColorWeight(state.targetColor);\n\n  const weightError = targetWeight - currWeight;\n\n  const accuracyMod = config.accuracyMods.reduce((currMod, [max, mod]) => {\n    return colorErrorPct <= max ? mod : currMod;\n  }, 0);\n\n  const baseAward =\n    (targetWeight - Math.abs(weightError)) *\n    config.colorCost *\n    config.shipAwardMultiplyer *\n    accuracyMod;\n  return [\n    Math.max(baseAward - colorErrorPct * baseAward, 0),\n    colorErrorPct,\n    weightError\n  ];\n};\n\n// Main loop\nconst tick = state => {\n  const now = getMs();\n  state.timeDelta = now - state.lastFrame;\n  state.lastFrame = now;\n  update(state);\n  render(state);\n  window.requestAnimationFrame(() => {\n    tick(state);\n  });\n};\n\n// Time based updates\nconst update = state => {\n  state.score += prorateSeconds(\n    config.scoreIncrement + calculateInterest(state),\n    state.timeDelta\n  );\n};\n\n// Render updates to interface\nconst render = state => {\n  const currentColor = calculateColorHex(state.colors);\n  const targetColor = calculateColorHex(state.targetColor);\n  elem.innerHTML = `\n    <p>Your current score is ${Math.floor(state.score)}</p>\n    <p>You've invested ${state.investment} times</p>\n    <p>Your investment multiplier is ${state.investment.toPrecision(\n      2\n    )}% (${calculateInterest(state)} per second)</p>\n    <p>\n      <h3>Colors:</h3>\n      <ul>\n        <li>Red: ${state.colors.red}</li>\n        <li>Green: ${state.colors.green}</li>\n        <li>Blue: ${state.colors.blue}</li>\n      </ul>\n    </p>\n    <p>Current color: <span class=\"swatch\" style=\"background-color: #${currentColor};\"></span></p>\n    <p>\n      <h3>Target Color:</h3>\n      <span class=\"swatch\" style=\"background-color: #${targetColor};\"></span>\n    </p>\n    <p>\n      <h3>Shipped: </h3>\n      <ul>\n        ${renderShipped(state)}\n      </ul>\n    </p>\n  `;\n};\n\nconst renderShipped = state =>\n  state.shipped\n    .map(\n      ({ shippedColor, targetColor, shipValue, error, weightDiff }) => `<li>\n    Shipped Color: <span class=\"swatch\" style=\"background-color: #${calculateColorHex(\n      shippedColor\n    )};\"></span><br />\n    Target Color: <span class=\"swatch\" style=\"background-color: #${calculateColorHex(\n      targetColor\n    )};\"></span><br />\n    Earned: ${shipValue}<br />\n    Error: ${(error * 100).toPrecision(2)}%<br />\n    Weight diff: ${weightDiff}\n  </li>`\n    )\n    .join(\"\");\n\n// Setup click handlers\nconst init = state => {\n  state.lastFrame = getMs();\n  moreButton.addEventListener(\"click\", () => {\n    state.score += config.scoreIncrement;\n  });\n  investButton.addEventListener(\"click\", () => {\n    if (state.score >= config.investmentCost) {\n      state.score -= config.investmentCost;\n      state.investment += 1;\n    }\n  });\n  buyRedButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.red += config.colorIncrement;\n    }\n  });\n  buyGreenButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.green += config.colorIncrement;\n    }\n  });\n  buyBlueButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.blue += config.colorIncrement;\n    }\n  });\n  shipButton.addEventListener(\"click\", () => {\n    const [shipValue, errorPct, weightError] = calculateShipValue(state);\n    if (shipValue > 0) {\n      state.score += shipValue;\n      state.shipped.unshift({\n        shippedColor: state.colors,\n        targetColor: state.targetColor,\n        shipValue: shipValue,\n        error: errorPct,\n        weightDiff: weightError\n      });\n      state.colors = {\n        red: 0,\n        green: 0,\n        blue: 0\n      };\n      state.targetColor = {\n        red: Math.floor(Math.random() * 10),\n        green: Math.floor(Math.random() * 10),\n        blue: Math.floor(Math.random() * 10)\n      };\n    }\n  });\n  dumpButton.addEventListener(\"click\", () => {\n    const currWeight = calculateColorWeight(state.colors);\n    const dumpCost = currWeight * config.dumpMultiplyer;\n    if (state.score >= dumpCost) {\n      state.score -= dumpCost;\n      state.colors = {\n        red: 0,\n        green: 0,\n        blue: 0\n      };\n    }\n  });\n\n  tick(state);\n};\n\n// Start to init\nstartButton.addEventListener(\"click\", function initOnClick() {\n  startButton.removeEventListener(\"click\", initOnClick);\n  init(state);\n});\n"]}
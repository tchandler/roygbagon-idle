{"version":3,"sources":["index.js"],"names":["elem","document","getElementById","startButton","moreButton","investButton","buyRedButton","buyGreenButton","buyBlueButton","shipButton","config","scoreIncrement","investmentIncrement","investmentCost","colorCost","colorIncrement","shipAwardMultiplyer","state","score","investment","ticks","lastFrame","timeDelta","colors","red","green","blue","targetColor","getMs","Date","now","prorate","value","period","prorateSeconds","prorateInterest","calculateInterest","calculateColorHex","total","redHex","Math","floor","toString","greenHex","blueHex","substr","calculateShipValue","currColor","parseInt","errorPct","abs","baseAward","max","tick","update","render","window","requestAnimationFrame","currentColor","innerHTML","toPrecision","init","addEventListener","shipValue","console","log","random","initOnClick","removeEventListener"],"mappings":"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","file":"roygbagon-idle.29c83358.js","sourceRoot":"..","sourcesContent":["const elem = document.getElementById('roygbagon')\nconst startButton = document.getElementById('start')\nconst moreButton = document.getElementById('more')\nconst investButton = document.getElementById('invest')\nconst buyRedButton = document.getElementById('buyRed')\nconst buyGreenButton = document.getElementById('buyGreen')\nconst buyBlueButton = document.getElementById('buyBlue')\nconst shipButton = document.getElementById('shipIt')\n\nconst config = {\n  scoreIncrement: 10,\n  investmentIncrement: 1,\n  investmentCost: 100,\n  colorCost: 50,\n  colorIncrement: 1,\n  shipAwardMultiplyer: 1.10\n}\n\nconst state = {\n  score: 0,\n  investment: 0,\n  ticks: 0,\n  lastFrame: 0,\n  timeDelta: 0,\n  colors: {\n    red: 0,\n    green: 0,\n    blue: 0\n  },\n  targetColor: {\n    red: 2,\n    green: 3,\n    blue: 6\n  }\n}\n\n// Helper functions\nconst getMs = () => Date.now()\n\nconst prorate = (value, timeDelta, period) => value * (timeDelta / period)\nconst prorateSeconds = (value, timeDelta) => prorate(value, timeDelta, 1000)\nconst prorateInterest = (state) => prorateSeconds(calculateInterest(state), state.timeDelta)\nconst calculateInterest = (state) => config.scoreIncrement * (state.investment/1000)\n\nconst calculateColorHex = ({red, green, blue}) => {\n  const total = red + green + blue\n  const redHex = '0' + Math.floor((red / total) * 255).toString(16)\n  const greenHex = '0' + Math.floor((green / total) * 255).toString(16)\n  const blueHex = '0' + Math.floor((blue / total) * 255).toString(16)\n  return `${redHex.substr(-2)}${greenHex.substr(-2)}${blueHex.substr(-2)}`\n}\n\nconst calculateShipValue = (state) => {\n  const currColor = parseInt(calculateColorHex(state.colors), 16)\n  const targetColor = parseInt(calculateColorHex(state.targetColor), 16)\n  const errorPct = Math.abs(currColor - targetColor)/0xFFFFFF\n  const baseAward = (state.targetColor.red + state.targetColor.green + state.targetColor.blue) * config.colorCost * config.shipAwardMultiplyer\n  return Math.max(baseAward - (errorPct * baseAward), 0)\n}\n\n// Main loop\nconst tick = (state) => {\n    const now = getMs()\n    state.timeDelta = now - state.lastFrame\n    state.lastFrame = now\n    update(state)\n    render(state)\n    window.requestAnimationFrame(() => {\n      tick(state)\n    })\n}\n\n// Time based updates\nconst update = (state) => {\n  state.score += prorateSeconds(config.scoreIncrement + calculateInterest(state), state.timeDelta)\n}\n\n// Render updates to interface\nconst render = (state) => {\n  const currentColor = calculateColorHex(state.colors)\n  const targetColor = calculateColorHex(state.targetColor)\n  elem.innerHTML = `\n    <p>Your current score is ${Math.floor(state.score)}</p>\n    <p>You've invested ${state.investment} times</p>\n    <p>Your investment multiplier is ${(state.investment).toPrecision(2)}% (${calculateInterest(state)} per second)</p>\n    <p>\n      <h3>Colors:</h3>\n      <ul>\n        <li>Red: ${state.colors.red}</li>\n        <li>Green: ${state.colors.green}</li>\n        <li>Blue: ${state.colors.blue}</li>\n      </ul>\n    </p>\n    <p>Current color: <span class=\"swatch\" style=\"background-color: #${currentColor};\"></span></p>\n    <p>\n      <h3>Target Color:</h3>\n      <span class=\"swatch\" style=\"background-color: #${targetColor};\"></span>\n    </p>\n  `\n}\n\n\n// Setup click handlers\nconst init = (state) => {\n  state.lastFrame = getMs()\n  moreButton.addEventListener('click', () => {\n    state.score += config.scoreIncrement\n  })\n  investButton.addEventListener('click', () => {\n    if (state.score >= config.investmentCost) {\n      state.score -= config.investmentCost\n      state.investment += config.investmentIncrement\n    }\n  })\n  buyRedButton.addEventListener('click', () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost\n      state.colors.red += config.colorIncrement\n    }\n  })\n  buyGreenButton.addEventListener('click', () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost\n      state.colors.green += config.colorIncrement\n    }\n  })\n  buyBlueButton.addEventListener('click', () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost\n      state.colors.blue += config.colorIncrement\n    }\n  })\n  shipButton.addEventListener('click', () => {\n    const shipValue = calculateShipValue(state)\n    console.log('earned', shipValue)\n    state.score += shipValue\n    state.colors = {\n      red: 0, green: 0, blue: 0\n    }\n    state.targetColor = {\n      red: Math.floor(Math.random() * 10),\n      green: Math.floor(Math.random() * 10),\n      blue: Math.floor(Math.random() * 10)\n    }\n  })\n  tick(state)\n}\n\n// Start to init\nstartButton.addEventListener('click', function initOnClick() {\n  startButton.removeEventListener('click', initOnClick)\n  init(state)\n})"]}
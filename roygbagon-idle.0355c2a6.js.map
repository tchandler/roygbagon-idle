{"version":3,"sources":["index.js"],"names":["elem","document","getElementById","startButton","moreButton","investButton","buyRedButton","buyGreenButton","buyBlueButton","shipButton","dumpButton","config","scoreIncrement","investmentIncrement","investmentCost","colorCost","colorIncrement","shipAwardMultiplyer","dumpMultiplyer","state","score","investment","ticks","lastFrame","timeDelta","colors","red","green","blue","targetColor","shipped","getMs","Date","now","prorate","value","period","prorateSeconds","prorateInterest","calculateInterest","calculateColorHex","total","calculateColorWeight","redHex","Math","floor","toString","greenHex","blueHex","substr","calculateShipValue","currColor","parseInt","colorErrorPct","abs","currWeight","targetWeight","weightError","baseAward","max","tick","update","render","window","requestAnimationFrame","currentColor","innerHTML","toPrecision","renderShipped","map","shippedColor","shipValue","error","weightDiff","join","init","addEventListener","errorPct","unshift","random","dumpCost","initOnClick","removeEventListener"],"mappings":"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","file":"roygbagon-idle.0355c2a6.js","sourceRoot":"..","sourcesContent":["const elem = document.getElementById(\"roygbagon\");\nconst startButton = document.getElementById(\"start\");\nconst moreButton = document.getElementById(\"more\");\nconst investButton = document.getElementById(\"invest\");\nconst buyRedButton = document.getElementById(\"buyRed\");\nconst buyGreenButton = document.getElementById(\"buyGreen\");\nconst buyBlueButton = document.getElementById(\"buyBlue\");\nconst shipButton = document.getElementById(\"shipIt\");\nconst dumpButton = document.getElementById(\"dumpIt\");\n\nconst config = {\n  scoreIncrement: 10,\n  investmentIncrement: 10,\n  investmentCost: 1000,\n  colorCost: 50,\n  colorIncrement: 1,\n  shipAwardMultiplyer: 1.1,\n  dumpMultiplyer: 1.1\n};\n\nconst state = {\n  score: 0,\n  investment: 0,\n  ticks: 0,\n  lastFrame: 0,\n  timeDelta: 0,\n  colors: {\n    red: 0,\n    green: 0,\n    blue: 0\n  },\n  targetColor: {\n    red: 2,\n    green: 3,\n    blue: 6\n  },\n  shipped: []\n};\n\n// Helper functions\nconst getMs = () => Date.now();\n\nconst prorate = (value, timeDelta, period) => value * (timeDelta / period);\nconst prorateSeconds = (value, timeDelta) => prorate(value, timeDelta, 1000);\nconst prorateInterest = state =>\n  prorateSeconds(calculateInterest(state), state.timeDelta);\nconst calculateInterest = state =>\n  config.scoreIncrement * (state.investment / 1000);\n\nconst calculateColorHex = ({ red, green, blue }) => {\n  const total = calculateColorWeight({ red, green, blue });\n  const redHex = \"0\" + Math.floor((red / total) * 255).toString(16);\n  const greenHex = \"0\" + Math.floor((green / total) * 255).toString(16);\n  const blueHex = \"0\" + Math.floor((blue / total) * 255).toString(16);\n  return `${redHex.substr(-2)}${greenHex.substr(-2)}${blueHex.substr(-2)}`;\n};\n\nconst calculateColorWeight = ({ red, green, blue }) => red + green + blue;\n\nconst calculateShipValue = state => {\n  const currColor = parseInt(calculateColorHex(state.colors), 16);\n  const targetColor = parseInt(calculateColorHex(state.targetColor), 16);\n  const colorErrorPct = Math.abs(currColor - targetColor) / 0xffffff;\n\n  const currWeight = calculateColorWeight(state.colors);\n  const targetWeight = calculateColorWeight(state.targetColor);\n\n  const weightError = targetWeight - currWeight;\n\n  const baseAward =\n    (targetWeight - Math.abs(weightError)) *\n    config.colorCost *\n    config.shipAwardMultiplyer;\n  return [\n    Math.max(baseAward - colorErrorPct * baseAward, 0),\n    colorErrorPct,\n    weightError\n  ];\n};\n\n// Main loop\nconst tick = state => {\n  const now = getMs();\n  state.timeDelta = now - state.lastFrame;\n  state.lastFrame = now;\n  update(state);\n  render(state);\n  window.requestAnimationFrame(() => {\n    tick(state);\n  });\n};\n\n// Time based updates\nconst update = state => {\n  state.score += prorateSeconds(\n    config.scoreIncrement + calculateInterest(state),\n    state.timeDelta\n  );\n};\n\n// Render updates to interface\nconst render = state => {\n  const currentColor = calculateColorHex(state.colors);\n  const targetColor = calculateColorHex(state.targetColor);\n  elem.innerHTML = `\n    <p>Your current score is ${Math.floor(state.score)}</p>\n    <p>You've invested ${state.investment} times</p>\n    <p>Your investment multiplier is ${state.investment.toPrecision(\n      2\n    )}% (${calculateInterest(state)} per second)</p>\n    <p>\n      <h3>Colors:</h3>\n      <ul>\n        <li>Red: ${state.colors.red}</li>\n        <li>Green: ${state.colors.green}</li>\n        <li>Blue: ${state.colors.blue}</li>\n      </ul>\n    </p>\n    <p>Current color: <span class=\"swatch\" style=\"background-color: #${currentColor};\"></span></p>\n    <p>\n      <h3>Target Color:</h3>\n      <span class=\"swatch\" style=\"background-color: #${targetColor};\"></span>\n    </p>\n    <p>\n      <h3>Shipped: </h3>\n      <ul>\n        ${renderShipped(state)}\n      </ul>\n    </p>\n  `;\n};\n\nconst renderShipped = state =>\n  state.shipped\n    .map(\n      ({ shippedColor, targetColor, shipValue, error, weightDiff }) => `<li>\n    Shipped Color: <span class=\"swatch\" style=\"background-color: #${calculateColorHex(\n      shippedColor\n    )};\"></span><br />\n    Target Color: <span class=\"swatch\" style=\"background-color: #${calculateColorHex(\n      targetColor\n    )};\"></span><br />\n    Earned: ${shipValue}<br />\n    Error: ${(error * 100).toPrecision(2)}%<br />\n    Weight diff: ${weightDiff}\n  </li>`\n    )\n    .join(\"\");\n\n// Setup click handlers\nconst init = state => {\n  state.lastFrame = getMs();\n  moreButton.addEventListener(\"click\", () => {\n    state.score += config.scoreIncrement;\n  });\n  investButton.addEventListener(\"click\", () => {\n    if (state.score >= config.investmentCost) {\n      state.score -= config.investmentCost;\n      state.investment += config.investmentIncrement;\n    }\n  });\n  buyRedButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.red += config.colorIncrement;\n    }\n  });\n  buyGreenButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.green += config.colorIncrement;\n    }\n  });\n  buyBlueButton.addEventListener(\"click\", () => {\n    if (state.score >= config.colorCost) {\n      state.score -= config.colorCost;\n      state.colors.blue += config.colorIncrement;\n    }\n  });\n  shipButton.addEventListener(\"click\", () => {\n    const [shipValue, errorPct, weightError] = calculateShipValue(state);\n    if (shipValue > 0) {\n      state.score += shipValue;\n      state.shipped.unshift({\n        shippedColor: state.colors,\n        targetColor: state.targetColor,\n        shipValue: shipValue,\n        error: errorPct,\n        weightDiff: weightError\n      });\n      state.colors = {\n        red: 0,\n        green: 0,\n        blue: 0\n      };\n      state.targetColor = {\n        red: Math.floor(Math.random() * 10),\n        green: Math.floor(Math.random() * 10),\n        blue: Math.floor(Math.random() * 10)\n      };\n    }\n  });\n  dumpButton.addEventListener('click', () => {\n    const currWeight = calculateColorWeight(state.colors)\n    const dumpCost = currWeight * config.dumpMultiplyer\n    if (state.score >= dumpCost) {\n      state.score -= dumpCost\n      state.colors = { red: 0, green: 0, blue: 0 }\n    }\n  })\n\n  tick(state);\n};\n\n// Start to init\nstartButton.addEventListener(\"click\", function initOnClick() {\n  startButton.removeEventListener(\"click\", initOnClick);\n  init(state);\n});\n"]}